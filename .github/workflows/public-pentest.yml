name: Run LLM Pentest

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.11'
      pentest-template:
        description: 'Pentest template name to use'
        required: false
        type: string
        default: 'CI/CD Pentest All Categories'
      artifact-retention-days:
        description: 'Days to retain artifacts'
        required: false
        type: number
        default: 30
      fail-on-moderate:
        description: 'Whether to fail workflow on moderate outcomes'
        required: false
        type: boolean
        default: false
      poll-interval-secs:
        type: number
        default: 60
      poll-timeout-secs:
        type: number
        default: 3600
      poll-backoff-base-secs:
        type: number
        default: 5
      poll-backoff-max-secs:
        type: number
        default: 300
      poll-not-found-grace:
        type: number
        default: 3
      max-concurrent-pentests:
        description: 'Maximum number of pentests to run in parallel'
        type: number
        default: 8
      max-start-retries:
        description: 'Retries when starting a pentest fails (retryable)'
        type: number
        default: 3
      start-retry-delay:
        description: 'Seconds to wait between start retries'
        type: number
        default: 30
      poll-timeout-action:
        description: 'What to do on poll timeout: fail | continue | partial'
        type: string
        default: 'fail'
      graphql-extended-timeout-secs:
        description: 'Extra seconds to keep polling via GraphQL after RUNNING timeouts'
        type: number
        default: 1800
      graphql-poll-interval-secs:
        description: 'Interval (secs) between extended GraphQL polls'
        type: number
        default: 120
      log-jwt-threads:
        type: boolean
        default: false
    secrets:
      ALLTRUE_API_KEY:
        description: 'AllTrue API Key'
        required: true
      ALLTRUE_API_URL:
        description: 'AllTrue API URL'
        required: true
      ALLTRUE_CUSTOMER_ID:
        description: 'AllTrue Customer ID'
        required: true
      ALLTRUE_ORGANIZATION_ID:
        description: 'AllTrue Organization ID'
        required: true

    outputs:
      pentest-status:
        description: "Overall pentest execution status"
        value: ${{ jobs.run-pentest.outputs.status }}
      worst-outcome:
        description: "Worst outcome across all resources"
        value: ${{ jobs.run-pentest.outputs.outcome }}

jobs:
  run-pentest:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    outputs:
      status: ${{ steps.decide.outputs.status }}
      outcome: ${{ steps.extract-outcome.outputs.outcome }}
    
    steps:
      - name: Checkout musical-dollop
        uses: actions/checkout@v4
        with: 
          repository: tonyAllTrue/musical-dollop
          ref: v0.0.1-alpha
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
          
      - name: Install dependencies
        run: pip install -r requirements.txt
          
      - name: Run pentest script
        id: pentest
        continue-on-error: true
        env:
          API_KEY: ${{ secrets.ALLTRUE_API_KEY }}
          API_URL: ${{ secrets.ALLTRUE_API_URL }}
          CUSTOMER_ID: ${{ secrets.ALLTRUE_CUSTOMER_ID }}
          ORGANIZATION_ID: ${{ secrets.ALLTRUE_ORGANIZATION_ID }}
          TARGET_TEMPLATE_NAME: ${{ inputs.pentest-template }}
          FAIL_ON_MODERATE: ${{ inputs.fail-on-moderate }}
          POLL_INTERVAL_SECS: ${{ inputs.poll-interval-secs }}
          POLL_TIMEOUT_SECS: ${{ inputs.poll-timeout-secs }}
          POLL_BACKOFF_BASE_SECS: ${{ inputs.poll-backoff-base-secs }}
          POLL_BACKOFF_MAX_SECS: ${{ inputs.poll-backoff-max-secs }}
          POLL_NOT_FOUND_GRACE: ${{ inputs.poll-not-found-grace }}
          MAX_CONCURRENT_PENTESTS: ${{ inputs.max-concurrent-pentests }}
          MAX_START_RETRIES: ${{ inputs.max-start-retries }}
          START_RETRY_DELAY: ${{ inputs.start-retry-delay }}
          POLL_TIMEOUT_ACTION: ${{ inputs.poll-timeout-action }}
          GRAPHQL_EXTENDED_TIMEOUT_SECS: ${{ inputs.graphql-extended-timeout-secs }}
          GRAPHQL_POLL_INTERVAL_SECS: ${{ inputs.graphql-poll-interval-secs }}
          LOG_JWT_THREADS: ${{ inputs.log-jwt-threads }}
        run: python run_pentest.py
        
      - name: Extract outcome for output
        id: extract-outcome
        if: always()
        run: |
          if [ -f "pentest_results_summary.json" ]; then
            OUTCOME=$(python - <<'PY'
            import json
            try:
                with open('pentest_results_summary.json', 'r') as f:
                    data = json.load(f)
                outcomes = [r.get('outcome', 'Unknown') for r in data if r.get('outcome')]
                if 'Critical' in outcomes or 'Poor' in outcomes:
                    print('Critical')
                elif 'Moderate' in outcomes:
                    print('Moderate')
                elif 'Good' in outcomes:
                    print('Good')
                elif 'Excellent' in outcomes:
                    print('Excellent')
                else:
                    print('Unknown')
            except Exception:
                print('Unknown')
            PY
            )
            echo "outcome=$OUTCOME" >> $GITHUB_OUTPUT
          else
            echo "outcome=Unknown" >> $GITHUB_OUTPUT
          fi

      - name: Decide workflow status
        id: decide
        if: always()
        run: |
          STATUS="${{ steps.pentest.outcome }}"                 # success|failure from the step (nonzero exit -> failure)
          WORST="${{ steps.extract-outcome.outputs.outcome }}"  # Critical|Poor|Moderate|Good|Excellent|Unknown
          FAIL_ON_MOD="${{ inputs.fail-on-moderate }}"

          if [ "$STATUS" = "failure" ]; then
            if [ "$WORST" = "Critical" ] || [ "$WORST" = "Poor" ]; then
              echo "status=failure" >> $GITHUB_OUTPUT
            elif [ "$WORST" = "Moderate" ] && [ "$FAIL_ON_MOD" = "true" ]; then
              echo "status=failure" >> $GITHUB_OUTPUT
            elif [ "$WORST" = "Unknown" ]; then
              echo "status=failure" >> $GITHUB_OUTPUT
            else
              echo "status=neutral" >> $GITHUB_OUTPUT
            fi
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload with timestamp
        if: always()
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          echo "timestamp=$TIMESTAMP" >> $GITHUB_ENV
          
      - name: Upload individual pentest CSV results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pentest-csv-results-${{ env.timestamp }}
          path: pentest_results_*.csv
          if-no-files-found: ignore
          retention-days: ${{ inputs.artifact-retention-days }}
          
      - name: Upload pentest summary JSON
        if: always() && hashFiles('pentest_results_summary.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: pentest-summary-${{ env.timestamp }}
          path: pentest_results_summary.json
          retention-days: ${{ inputs.artifact-retention-days }}
          
      - name: Check pentest outcome and fail workflow if needed
        if: always()
        run: |
          if [ "${{ steps.decide.outputs.status }}" = "failure" ]; then
            echo "Pentest failed with severe outcome (or hard failure)."
            exit 1
          elif [ "${{ steps.decide.outputs.status }}" = "neutral" ]; then
            echo "Pentest finished with neutral status (e.g., Moderate when fail-on-moderate=false or timeouts with partials)."
            exit 0
          else
            echo "Pentest completed successfully."
          fi