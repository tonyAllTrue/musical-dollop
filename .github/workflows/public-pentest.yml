name: Run LLM Pentest

on:
  workflow_call:
    inputs:
      python-version:
        type: string
        default: '3.11'
      pentest-template:
        type: string
        default: 'CI/CD Pentest All Categories'
      artifact-retention-days:
        type: number
        default: 30
      fail-on-moderate:
        type: boolean
        default: false
      poll-interval-secs:
        type: number
        default: 60
      poll-timeout-secs:
        type: number
        default: 3600
      poll-backoff-base-secs:
        type: number
        default: 5
      poll-backoff-max-secs:
        type: number
        default: 300
      poll-not-found-grace:
        type: number
        default: 3

    outputs:
      pentest-status:
        description: "Overall pentest execution status"
        value: ${{ jobs.run-pentest.outputs.status }}
      worst-outcome:
        description: "Worst outcome across all resources"
        value: ${{ jobs.run-pentest.outputs.outcome }}

jobs:
  run-pentest:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.pentest.outcome }}
      outcome: ${{ steps.extract-outcome.outputs.outcome }}
    
    steps:
      - name: Checkout musical-dollop
        uses: actions/checkout@v4
        with: 
          repository: tonyAllTrue/musical-dollop
          ref: v0.0.1-alpha
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
          
      - name: Install dependencies
        run: pip install -r requirements.txt
          
      - name: Run pentest script
        id: pentest
        continue-on-error: true
        env:
          API_KEY: ${{ secrets.ALLTRUE_API_KEY }}
          API_URL: ${{ secrets.ALLTRUE_API_URL }}
          CUSTOMER_ID: ${{ secrets.ALLTRUE_CUSTOMER_ID }}
          ORGANIZATION_ID: ${{ secrets.ALLTRUE_ORGANIZATION_ID }}
          TARGET_TEMPLATE_NAME: ${{ inputs.pentest-template }}
          FAIL_ON_MODERATE: ${{ inputs.fail-on-moderate }}
          POLL_INTERVAL_SECS: ${{ inputs.poll-interval-secs }}
          POLL_TIMEOUT_SECS: ${{ inputs.poll-timeout-secs }}
          POLL_BACKOFF_BASE_SECS: ${{ inputs.poll-backoff-base-secs }}
          POLL_BACKOFF_MAX_SECS: ${{ inputs.poll-backoff-max-secs }}
          POLL_NOT_FOUND_GRACE: ${{ inputs.poll-not-found-grace }}
        run: python run_pentest.py
        
      - name: Extract outcome for output
        id: extract-outcome
        if: always()
        run: |
          if [ -f "pentest_results_summary.json" ]; then
            # Extract worst outcome from the summary file if available
            OUTCOME=$(python -c "
            import json
            try:
                with open('pentest_results_summary.json', 'r') as f:
                    data = json.load(f)
                outcomes = [r.get('outcome', 'Unknown') for r in data if r.get('outcome')]
                if 'Critical' in outcomes or 'Poor' in outcomes:
                    print('Critical')
                elif 'Moderate' in outcomes:
                    print('Moderate')
                elif 'Good' in outcomes:
                    print('Good')
                elif 'Excellent' in outcomes:
                    print('Excellent')
                else:
                    print('Unknown')
            except:
                print('Unknown')
            " 2>/dev/null || echo "Unknown")
            echo "outcome=$OUTCOME" >> $GITHUB_OUTPUT
          else
            echo "outcome=Unknown" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload with timestamp
        if: always()
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          echo "timestamp=$TIMESTAMP" >> $GITHUB_ENV
          
      - name: Upload individual pentest CSV results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pentest-csv-results-${{ env.timestamp }}
          path: pentest_results_*.csv
          if-no-files-found: ignore
          retention-days: ${{ inputs.artifact-retention-days }}
          
      - name: Upload pentest summary JSON
        if: always() && hashFiles('pentest_results_summary.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: pentest-summary-${{ env.timestamp }}
          path: pentest_results_summary.json
          retention-days: ${{ inputs.artifact-retention-days }}
          
      - name: Check pentest outcome and fail workflow if needed
        if: always()
        run: |
          if [ "${{ steps.pentest.outcome }}" = "failure" ]; then
            echo "Pentest failed with severe outcome. Marking workflow as failed."
            exit 1
          else
            echo "Pentest completed successfully or with acceptable outcome."
          fi